front-end index.js
  document.addEventListener("DOMContentLoaded", function() {
    const taskInput = document.getElementById("taskInput"); // Get the input field
    const taskList = document.getElementById("taskList");

    const BACKEND_ROOT_URL = "http://localhost:3001"; // Replace with your actual backend URL
    taskInput.disabled = true; // Disable the input field

    // Function to enable input (example: after fetching tasks from backend)
  /* const enableInput = () => {
        taskInput.disabled = false;
    };*/

    const renderTasks = (task) => {
        const li = document.createElement("li");
        li.classList.add("list-group-item");
        li.textContent = task;
        taskList.appendChild(li);
    };

    /*taskInput.addEventListener("keypress", function(event) { // Corrected event listener
      if (event.key === "Enter") {
        if (taskInput.value.trim() !== "") {
            const li = document.createElement("li");
            li.classList.add("list-group-item");
            li.textContent = taskInput.value;
            taskList.appendChild(li);
            taskInput.value = ""; // Clear input after adding
        }
    }
    });*/
    
    // Function to fetch tasks from backend
    const getTasks = async () => {
        try {
           
            const response = await fetch(BACKEND_ROOT_URL);
            const tasks = await response.json(); // Parse JSON response

            tasks.forEach(taskObj => {
                renderTasks(taskObj.description); // Assuming JSON object has "task" key
            });
            taskInput.disabled = false; // Enable input after fetching tasks
           // enableInput(); // Enable input after fetching tasks
        } catch (error) {
            console.error("Error fetching tasks:", error);
            taskInput.disabled = false; // Ensure input is enabled even if fetch fails
        
        }
    };
      // Function to add new task to backend
      const addTask = async (task) => {
        try {
            const response = await fetch(BACKEND_ROOT_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ description: task }) // "description" matches DB column
            });

            if (!response.ok) {
                throw new Error("Failed to add task");
            }

            getTasks(); // Refresh task list after adding
        } catch (error) {
            console.error("Error adding task:", error);
        }
    };

    taskInput.addEventListener("keydown", async function(event) {
     if (event.key === "Enter") {
        event.preventDefault();
        const task = taskInput.value.trim();
        if (task !== "") {
            renderTasks(task);// Send new task to backend
             taskInput.value = ""; // Clear input after adding
        }
    }
});
    
        getTasks(); // Fetch tasks when the page loads
});

fron-end html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To Do List</title>
        <link rel="stylesheet" href="CSS/styles.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center">Todo List</h1>
        <div class="input-group">
            <input type="text" id="taskInput" class="form-control" placeholder="Enter a new task">
        </div>
        <ul id="taskList" class="list-group mt-3"></ul>
    </div>
    
      <script src="JS/index.js" defer></script>
</body>
</html>

back-end index.js

const express = require("express");
const cors = require("cors");
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(express.json()); // Allow parsing of JSON bodies in requests

const port = 3001;

const openDb = () => {
  return new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'todo',
    password: 'todo@123',
    port: 5432,
  });
};

// GET route to fetch tasks
app.get("/", async (req, res) => {
  const pool = openDb();  // Open database connection
  try {
    const result = await pool.query('SELECT * FROM tasks');
    res.status(200).json(result.rows);  // Return the rows from the task table
  } catch (error) {
    res.status(500).json({ error: error.message });  // Internal server error
  } finally {
    pool.end();  // Close the pool after query is done
  }
});

// POST route to insert a new task
app.post("/", async (req, res) => {
  const pool = openDb(); // Open database connection
  const { description } = req.body; // Get task description from the request body

  try {
    // Insert task into the database
    const result = await pool.query(
      'INSERT INTO tasks (description) VALUES ($1) RETURNING *',
      [description]  // Parameterized query to prevent SQL injection
    );

    // Return the inserted task (including the generated ID)
    res.status(201).json(result.rows[0]);  // Return the first row (the inserted task)
  } catch (error) {
    res.status(500).json({ error: error.message });  // Internal server error
  } finally {
    pool.end();  // Close the pool after query is done
  }
});

app.listen(port, async () => {
  try {
    const pool = openDb();
    await pool.connect(); // Test the database connection
    console.log(`Server is running on http://localhost:${port}`);
  } catch (error) {
    console.error("Database connection error:", error.message);
    process.exit(1);  // Exit if database connection fails
  }
});

backend-package.json

{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "devStart": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "nodemon": "^3.1.9",
    "pg": "^8.14.0"
  }
}

back-end database.SQL

-- Drop database if it exists
DROP DATABASE IF EXISTS todo;
CREATE DATABASE todo;

-- Switch to the 'todo' database (not needed inside SQL files, use in psql)
\c todo;

-- Create 'tasks' table
CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,
    description VARCHAR(255) NOT NULL
);

-- Insert initial data
INSERT INTO tasks (description) VALUES 
('My test task'),
('My another task');


